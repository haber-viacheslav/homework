{"version":3,"sources":["js/9-module.js"],"names":["fetchUserFromServer","username","onSuccess","onError","console","log","setTimeout","onFetchSuccess","user","onFetchError","error","makePromise","text","delay","Promise","resolve","promiseA","promiseB","all","then","value","catch"],"mappings":";AAkDA,MAAMA,EAAsB,CAACC,EAAUC,EAAWC,KACjDC,QAAQC,yBAAyBJ,KAEjCK,WAAW,KAKTJ,EAAU,kBAIT,MAGEK,EAAiBC,IACtBJ,QAAQC,IAAIG,IAGPC,EAAeC,IACpBN,QAAQM,MAAMA,IAGfV,EAAoB,QAASO,GAE7B,MAAMI,EAAc,CAACC,EAAMC,IACnB,IAAIC,QAAQC,IAClBT,WAAW,IAAMS,EAAQH,GAAOC,KAI5BG,EAAWL,EAAY,iBAAkB,KACzCM,EAAWN,EAAY,iBAAkB,KAE/CG,QAAQI,IAAI,CAACF,EAAUC,IACrBE,KAAKC,GAAShB,QAAQC,IAAIe,IAC1BC,MAAMX,GAASN,QAAQC,IAAIK","file":"9-module.1ff31436.js","sourceRoot":"../src","sourcesContent":["// const isSuccess = true;\n\n// const promise1 = new Promise((resolve, reject) => {\n// \tsetTimeout(() => {\n// \t\tif (isSuccess) {\n// \t\t\tresolve('Success! Value passed to resolve function');\n// \t\t} else {\n// \t\t\treject('Error! Error passed to reject function');\n// \t\t}\n// \t}, 2000);\n// });\n\n// promise1\n// \t.then(value => {\n// \t\tconsole.log(value);\n// \t})\n// \t.catch(error => {\n// \t\tconsole.log(error);\n// \t});\n\n// const promise = new Promise((resolve, reject) => {\n// \tlet random = Math.random() > 0.4;\n// \tsetTimeout(() => {\n// \t\tif (random) {\n// \t\t\tresolve(5);\n// \t\t} else {\n// \t\t\treject('Error');\n// \t\t}\n// \t}, 500);\n// });\n\n// promise\n// \t.then(value => {\n// \t\tconsole.log(value); // 5\n// \t\treturn value * 2;\n// \t})\n// \t.then(value => {\n// \t\tconsole.log(value); // 10\n// \t\treturn value * 3;\n// \t})\n// \t.then(value => {\n// \t\tconsole.log(value); // 30\n// \t})\n// \t.catch(error => {\n// \t\tconsole.log(error);\n// \t})\n// \t.finally(() => {\n// \t\tconsole.log('Final task');\n// \t});\n\nconst fetchUserFromServer = (username, onSuccess, onError) => {\n\tconsole.log(`Fetching data for ${username}`);\n\n\tsetTimeout(() => {\n\t\t// Change value of isSuccess variable to simulate request status\n\t\tconst isSuccess = true;\n\n\t\tif (isSuccess) {\n\t\t\tonSuccess('success value');\n\t\t} else {\n\t\t\tonError('error');\n\t\t}\n\t}, 2000);\n};\n\nconst onFetchSuccess = user => {\n\tconsole.log(user);\n};\n\nconst onFetchError = error => {\n\tconsole.error(error);\n};\n\nfetchUserFromServer('Mango', onFetchSuccess, onFetchError);\n\nconst makePromise = (text, delay) => {\n\treturn new Promise(resolve => {\n\t\tsetTimeout(() => resolve(text), delay);\n\t});\n};\n\nconst promiseA = makePromise('promiseA value', 1000);\nconst promiseB = makePromise('promiseB value', 3000);\n\nPromise.all([promiseA, promiseB])\n\t.then(value => console.log(value)) //[\"promiseA value\", \"promiseB value\"]\n\t.catch(error => console.log(error));\n"]}