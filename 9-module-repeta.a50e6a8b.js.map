{"version":3,"sources":["js/9-module-repeta.js"],"names":["refs","startBtn","document","querySelector","stopBtn","clockFace","timer","isActive","intId","start","startTime","Date","now","setInterval","resultTime","hours","mins","secs","getTimeComponents","textContent","setAttribute","stop","clearInterval","removeAttribute","pad","value","String","padStart","time","Math","floor","addEventListener"],"mappings":";AA2CA,MAAMA,EAAO,CACZC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAM7BG,EAAQ,CAEbC,UAAU,EACVC,MAAO,KACPC,QACC,MAAMC,EAAYC,KAAKC,MAEnB,KAAKJ,MAAQK,YAAY,KAC5B,MACMC,EADcH,KAAKC,MACQF,GAC3B,MAAEK,EAAK,KAAEC,EAAI,KAAEC,GAASC,EAAkBJ,GAChDd,EAAKK,UAAUc,eAAiBJ,KAASC,KAAQC,IAC9C,KAAKV,UAGPP,EAAKC,SAASmB,aAAa,YAAY,IAMtC,MAGJC,OACCC,cAAc,KAAKd,OACnB,KAAKD,UAAW,EAChBP,EAAKC,SAASsB,gBAAgB,cAMhC,SAASC,EAAKC,GACb,OAAOC,OAAOD,GAAOE,SAAS,EAAG,KAIlC,SAAST,EAAkBU,GAOtB,MAAO,CAAEb,MANKS,EACZK,KAAKC,MAAOF,EAAQ,MAAyB,OAK/BZ,KAHHQ,EAAIK,KAAKC,MAAOF,EAAQ,KAAoB,MAGnCX,KAFTO,EAAIK,KAAKC,MAAOF,EAAQ,IAAc,OAZxD5B,EAAKC,SAAS8B,iBAAiB,QAAS,KAAOzB,EAAMG,UACrDT,EAAKI,QAAQ2B,iBAAiB,QAAS,KAAOzB,EAAMe","file":"9-module-repeta.a50e6a8b.js","sourceRoot":"../src","sourcesContent":["// Birthday table\n// import employees from './employees.json';\n// import { calculateAge } from './helpers/calculateAge';\n// import { isBirthday } from './helpers/isBirthday';\n\n// // console.table(employees);\n\n// document.querySelector('tbody').innerHTML = tableMarkup();\n\n// function tableMarkup() {\n// \treturn employees.map(({ username, birthDate }) => {\n// \t\t\treturn `<tr>\n// \t\t\t\t\t<td>${username}</td>\n// \t\t\t\t\t<td>${calculateAge(birthDate)}</td>\n// \t\t\t\t\t<td>${isBirthday(birthDate) ? 'Yes' : 'No'}</td>\n// \t\t\t\t</tr>`;\n// \t\t})\n// \t\t.join('');\n// }\n\n\n// Comments\n\n// import comments from './comments.json'\n// import {formateDatetime} from './helpers/formatDate'\n// document.querySelector('.comments').innerHTML = comentsMurkup();\n\n// function comentsMurkup () {\n// \treturn comments.map(({author, content, createdAt}) =>{\n// \treturn\t`<div class=\"comment\">\n// \t\t\t\t<header>\n// \t\t\t\t\t<b>${author}</b> posted\n// \t\t\t\t\t<time datetime=\"\">\n// \t\t\t\t\t\t<i>${ formateDatetime (createdAt)}</i>\n// \t\t\t\t\t</time>\n// \t\t\t\t</header>\n// \t\t\t\t<p>${content}</p>\n// \t\t\t</div>`;\n// \t}).join('');\n// }\n\n// Timer\n\nconst refs = {\n\tstartBtn: document.querySelector('button[data-action-start]'),\n\tstopBtn: document.querySelector('button[data-action-stop]'),\n\tclockFace: document.querySelector('.js-clockface'),\n}\n\n// console.log(refs.stopBtn);\n// console.log(refs.startBtn);\n// console.log(refs.clockFace);\nconst timer = {\n\n\tisActive: true,\n\tintId: null,\n\tstart () {\n\t\tconst startTime = Date.now();\n\t    \n\t\t    this.intId = setInterval(() => {\n\t\t\tconst currentTime = Date.now();\n\t\t\tconst resultTime = currentTime - startTime;\n\t\t\tconst { hours, mins, secs } = getTimeComponents(resultTime)\n\t\t\trefs.clockFace.textContent = `${hours}:${mins}:${secs}`\n\t\t\tif(this.isActive) {\n\t\t\t\t// console.log(refs.startBtn.getAttribute('disabled'));\n\t\t\t\t\n\t\t\t\trefs.startBtn.setAttribute('disabled', true)\n\n\t\t\t\t// console.log(refs.startBtn.getAttribute('disabled'));\n\t\t\t}\n\t\t\t// console.log('start -> current time', currentTime - startTime);\n\t\t\t\n\t\t}, 1000)\n\t\t\n\t},\n\tstop() {\n\t\tclearInterval(this.intId);\n\t\tthis.isActive = false;\n\t\trefs.startBtn.removeAttribute('disabled')\n\t}\n\t\n}\nrefs.startBtn.addEventListener('click', () => {timer.start()});\nrefs.stopBtn.addEventListener('click', () => {timer.stop()})\nfunction pad (value) {\n\treturn String(value).padStart(2, \"0\");\n}\n\n\nfunction getTimeComponents(time) {\n\t    const hours = pad(\n\t      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n\t    );\n\t    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\t    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\t\n\t    return { hours, mins, secs };\n\t  }\n\n\n\n\n\n\n\n\n\n\n// const refs = {\n//   startBtn: document.querySelector('button[data-action-start]'),\n//   stopBtn: document.querySelector('button[data-action-stop]'),\n//   clockface: document.querySelector('.js-clockface'),\n// };\n\n// class Timer {\n//   constructor({ onTick }) {\n//     this.intervalId = null;\n//     this.isActive = false;\n//     this.onTick = onTick;\n\n//     this.init();\n//   }\n\n//   init() {\n//     const time = this.getTimeComponents(0);\n//     this.onTick(time);\n//   }\n\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n\n//     const startTime = Date.now();\n//     this.isActive = true;\n\n//     this.intervalId = setInterval(() => {\n//       const currentTime = Date.now();\n//       const deltaTime = currentTime - startTime;\n//       const time = this.getTimeComponents(deltaTime);\n\n//       this.onTick(time);\n//     }, 1000);\n//   }\n\n//   stop() {\n//     clearInterval(this.intervalId);\n//     this.isActive = false;\n//     const time = this.getTimeComponents(0);\n//     this.onTick(time);\n//   }\n\n//   /*\n//    * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö\n//    * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥\n//    * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ hours, mins, secs\n//    * - –ê–¥—Å–∫–∞—è –∫–æ–ø–∏–ø–∞—Å—Ç–∞ —Å–æ stackoverflow üí©\n//    */\n//   getTimeComponents(time) {\n//     const hours = this.pad(\n//       Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n//     );\n//     const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//     const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//     return { hours, mins, secs };\n//   }\n\n//   /*\n//    * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å—Ç—Ä–æ–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ 0 –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 2-—Ö –∑–Ω–∞–∫–æ–≤\n//    */\n//   pad(value) {\n//     return String(value).padStart(2, '0');\n//   }\n// }\n\n// const timer = new Timer({\n//   onTick: updateClockface,\n// });\n\n// refs.startBtn.addEventListener('click', timer.start.bind(timer));\n// refs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\n// /*\n//  * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö\n//  * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥\n//  * - –†–∏—Å—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n//  */\n// function updateClockface({ hours, mins, secs }) {\n//   refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n// }\n"]}