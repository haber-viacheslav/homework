{"version":3,"sources":["js/async-await.js"],"names":["getFruit","name","fruits","strawberry","kiwi","apple","Promise","resolve","reject","setTimeout","aMakeSmoothie","console","time","berry","all","log","timeEnd","error","BASE_URL"],"mappings":";AA2DA,SAASA,EAASC,GACjB,MAAMC,EAAS,CACdC,WAAY,KACZC,KAAM,MACNC,MAAO,MAGR,OAAO,IAAIC,QAAQ,CAACC,EAASC,IAC5BC,WAAW,IAAMF,EAAQL,EAAOD,IAAQ,MAI1C,eAAeS,IACd,IACCC,QAAQC,KAAK,iBACb,MAAMP,EAAQL,EAAS,SACjBI,EAAOJ,EAAS,QAChBa,EAAQb,EAAS,cAEjBE,QAAeI,QAAQQ,IAAI,CAACT,EAAOD,EAAMS,IAI/C,OAHAF,QAAQI,IAAIb,GACZS,QAAQK,QAAQ,iBAETd,EACN,MAAOe,GACRN,QAAQI,IAAI,WAIdL,IAgBA,MAAMQ,EAAW","file":"async-await.22c41d0b.js","sourceRoot":"../src","sourcesContent":["// async\n\n// async function f1() {\n// \treturn await fetch('http://localhost:3000/books/1');\n\n// \t// .then(response => {\n// \t// \tif (response.ok) {\n// \t// \t\treturn response.json();\n// \t// \t}\n// \t// \tthrow new Error(Error);\n// \t// })\n// \t// .then(data => console.log(data))\n// \t// .catch(error => console.log(error));\n// }\n\n// async function f2() {\n// \treturn await fetch('http://localhost:3000/books/2');\n// }\n\n// async function f3() {\n// \treturn await fetch('http://localhost:3000/books/3');\n// }\n\n// async function go() {\n// \tlet a = await f1()\n// \t\t.then(response => {\n// \t\t\tif (response.ok) {\n// \t\t\t\treturn response.json();\n// \t\t\t}\n// \t\t\tthrow new Error(Error);\n// \t\t})\n// \t\t.then(data => console.log(data));\n\n// \tlet b = await f2()\n// \t\t.then(response => {\n// \t\t\tif (response.ok) {\n// \t\t\t\treturn response.json();\n// \t\t\t}\n// \t\t\tthrow new Error(Error);\n// \t\t})\n// \t\t.then(data => console.log(data));\n\n// \tlet c = await f3()\n// \t\t.then(response => {\n// \t\t\tif (response.ok) {\n// \t\t\t\treturn response.json();\n// \t\t\t}\n// \t\t\tthrow new Error(Error);\n// \t\t})\n// \t\t.then(data => console.log(data));\n// }\n\n// go();\n\n// Repeta\n\n//try - catch\n// GET это просто fetch\n\nfunction getFruit(name) {\n\tconst fruits = {\n\t\tstrawberry: '🍓',\n\t\tkiwi: '🥝 ',\n\t\tapple: '🍎',\n\t};\n\n\treturn new Promise((resolve, reject) =>\n\t\tsetTimeout(() => resolve(fruits[name]), 500)\n\t);\n}\n\nasync function aMakeSmoothie() {\n\ttry {\n\t\tconsole.time('aMakeSmoothie');\n\t\tconst apple = getFruit('apple');\n\t\tconst kiwi = getFruit('kiwi');\n\t\tconst berry = getFruit('strawberry');\n\n\t\tconst fruits = await Promise.all([apple, kiwi, berry]);\n\t\tconsole.log(fruits);\n\t\tconsole.timeEnd('aMakeSmoothie');\n\n\t\treturn fruits;\n\t} catch (error) {\n\t\tconsole.log('Ошибка');\n\t}\n}\n\naMakeSmoothie();\n\n// async function fn () {}\n\n// const fn  = async function () {}\n\n// const arr = async () => {}\n\n// const x = {\n//   async getname () {}\n// }\n\n// class X {\n//   async getName () {}\n// }\n\nconst BASE_URL = 'http://localhost:3000';\n\n// function fetchBooks() {\n// \treturn fetch(`${BASE_URL}/books`).then(response => response.json());\n// }\n\n// console.log(fetchBooks().then(result => result));\n\n// function fetchBookById(bookId) {\n// \treturn fetch(`${BASE_URL}/books/${bookId}`)\n// \t\t.then(response => response.json())\n// \t\t.then(console.log);\n// }\n\n// fetchBooks();\n// fetchBookById(3);\n\n// POST\n\n// const newBook = {\n// \ttitle: 'Java Script and CSS',\n// \tauthor: 'Дэвид Флэнаган',\n// \tgenres: ['JS', 'CSS'],\n// \trating: 9.3,\n// };\n\n// function createBook(book) {\n// \tconst options = {\n// \t\tmethod: 'POST',\n// \t\theaders: {\n// \t\t\t'Content-Type': 'application/json',\n// \t\t},\n// \t\tbody: JSON.stringify(book),\n// \t};\n\n// \treturn fetch(`${BASE_URL}/books`, options).then(response =>\n// \t\tresponse.json()\n// \t);\n// }\n\n// createBook(newBook).then(renderBook);\n\n// function renderBook(book) {\n// \tconsole.log('Пришёл ответ! будем рисовать разметку');\n// \tconsole.log(book);\n// }\n\n// PATCH\n\n// const newCnangeInBook = {\n// \ttitle: 'React',\n// \tgenres: ['JS', 'React'],\n// };\n\n// function changeBook(book, id) {\n// \tconst options = {\n// \t\tmethod: 'PATCH',\n// \t\theaders: {\n// \t\t\t'Content-Type': 'application/json',\n// \t\t},\n// \t\tbody: JSON.stringify(book),\n// \t};\n\n// \treturn fetch(`${BASE_URL}/books/${id}`, options).then(response =>\n// \t\tresponse.json()\n// \t);\n// }\n\n// changeBook(newCnangeInBook, 6)\n// \t.then(console.log)\n// \t.catch(error => console.error(error));\n\n// DELETE\n\n// function deleteBookById(bookId) {\n// \tconst options = {\n// \t\tmethod: 'DELETE',\n// \t};\n// \treturn fetch(`${BASE_URL}/books/${bookId}`, options).then(response =>\n// \t\tresponse.json()\n// \t);\n// }\n\n// // console.log(dataBaseLength());\n\n// deleteBookById(21);\n// deleteBookById(22);\n"]}