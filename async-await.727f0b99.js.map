{"version":3,"sources":["js/async-await.js"],"names":["BASE_URL","newCnangeInBook","title","genres","changeBook","book","id","options","method","headers","body","JSON","stringify","fetch","json","deleteBookById","bookId","then","console","log","catch","error"],"mappings":";AAwGA,MAAMA,EAAW,wBAiDXC,EAAkB,CACvBC,MAAO,QACPC,OAAQ,CAAC,KAAM,UAGhB,eAAeC,EAAWC,EAAMC,GAC/B,MAAMC,EAAU,CACfC,OAAQ,QACRC,QAAS,CACR,eAAgB,oBAEjBC,KAAMC,KAAKC,UAAUP,IAGtB,aAAcQ,SAASb,WAAkBM,IAAMC,IAAUO,OAS1D,eAAeC,EAAeC,GAK7B,aADuBH,SAASb,WAAkBgB,IAHlC,CACfR,OAAQ,WARVJ,EAAWH,EAAiB,GAC1BgB,KAAKC,QAAQC,KACbC,MAAMC,GAASH,QAAQG,MAAMA,IAc/BN,EAAe,IACfA,EAAe","file":"async-await.727f0b99.js","sourceRoot":"../src","sourcesContent":["// async\n\n// async function f1() {\n// \treturn await fetch('http://localhost:3000/books/1');\n\n// \t// .then(response => {\n// \t// \tif (response.ok) {\n// \t// \t\treturn response.json();\n// \t// \t}\n// \t// \tthrow new Error(Error);\n// \t// })\n// \t// .then(data => console.log(data))\n// \t// .catch(error => console.log(error));\n// }\n\n// async function f2() {\n// \treturn await fetch('http://localhost:3000/books/2');\n// }\n\n// async function f3() {\n// \treturn await fetch('http://localhost:3000/books/3');\n// }\n\n// async function go() {\n// \tlet a = await f1()\n// \t\t.then(response => {\n// \t\t\tif (response.ok) {\n// \t\t\t\treturn response.json();\n// \t\t\t}\n// \t\t\tthrow new Error(Error);\n// \t\t})\n// \t\t.then(data => console.log(data));\n\n// \tlet b = await f2()\n// \t\t.then(response => {\n// \t\t\tif (response.ok) {\n// \t\t\t\treturn response.json();\n// \t\t\t}\n// \t\t\tthrow new Error(Error);\n// \t\t})\n// \t\t.then(data => console.log(data));\n\n// \tlet c = await f3()\n// \t\t.then(response => {\n// \t\t\tif (response.ok) {\n// \t\t\t\treturn response.json();\n// \t\t\t}\n// \t\t\tthrow new Error(Error);\n// \t\t})\n// \t\t.then(data => console.log(data));\n// }\n\n// go();\n\n// Repeta\n\n//try - catch\n// GET это просто fetch\n\n// function getFruit(name) {\n// \tconst fruits = {\n// \t\tstrawberry: '🍓',\n// \t\tkiwi: '🥝 ',\n// \t\tapple: '🍎',\n// \t};\n\n// \treturn new Promise((resolve, reject) =>\n// \t\tsetTimeout(() => resolve(fruits[name]), 500)\n// \t);\n// }\n\n// async function aMakeSmoothie() {\n// \ttry {\n// \t\tconsole.time('aMakeSmoothie');\n// \t\tconst apple = getFruit('apple');\n// \t\tconst kiwi = getFruit('kiwi');\n// \t\tconst berry = getFruit('strawberry');\n\n// \t\tconst fruits = await Promise.all([apple, kiwi, berry]);\n// \t\t// console.log(fruits);\n// \t\tconsole.timeEnd('aMakeSmoothie');\n\n// \t\treturn fruits;\n// \t} catch (error) {\n// \t\tconsole.log('Ошибка');\n// \t}\n// }\n\n// aMakeSmoothie().then(console.log);\n\n// async function fn () {}\n\n// const fn  = async function () {}\n\n// const arr = async () => {}\n\n// const x = {\n//   async getname () {}\n// }\n\n// class X {\n//   async getName () {}\n// }\n\nconst BASE_URL = 'http://localhost:3000';\n\n// async function fetchBooks() {\n// \tconst books = (await fetch(`${BASE_URL}/books`)).json();\n// \treturn books;\n// }\n\n// async function fetchBookById(bookId) {\n// \tconst book = (await fetch(`${BASE_URL}/books/${bookId}`)).json();\n// \treturn book;\n// }\n\n// fetchBooks().then(console.log);\n// fetchBookById(4).then(console.log);\n\n// POST\n\n// const newBook = {\n// \ttitle: 'Java Script and CSS',\n// \tauthor: 'Дэвид Флэнаган',\n// \tgenres: ['JS', 'CSS'],\n// \trating: 9.3,\n// };\n\n// async function createBook(book) {\n// \tconst options = {\n// \t\tmethod: 'POST',\n// \t\theaders: {\n// \t\t\t'Content-Type': 'application/json',\n// \t\t},\n// \t\tbody: JSON.stringify(book),\n// \t};\n\n// \treturn (await fetch(`${BASE_URL}/books`, options)).json();\n// }\n\n// async function renderBook(book) {\n// \ttry {\n// \t\tawait createBook(newBook).then(console.log);\n// \t\tconsole.log('Пришёл ответ! будем рисовать разметку');\n// \t\tconsole.log(book);\n// \t} catch (error) {\n// \t\tconsole.log(error);\n// \t}\n// }\n\n// renderBook();\n// PATCH\n\nconst newCnangeInBook = {\n\ttitle: 'React',\n\tgenres: ['JS', 'React'],\n};\n\nasync function changeBook(book, id) {\n\tconst options = {\n\t\tmethod: 'PATCH',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tbody: JSON.stringify(book),\n\t};\n\n\treturn (await fetch(`${BASE_URL}/books/${id}`, options)).json();\n}\n\nchangeBook(newCnangeInBook, 6)\n\t.then(console.log)\n\t.catch(error => console.error(error));\n\n// DELETE\n\nasync function deleteBookById(bookId) {\n\tconst options = {\n\t\tmethod: 'DELETE',\n\t};\n\tconst response = await fetch(`${BASE_URL}/books/${bookId}`, options);\n\treturn response;\n}\n\n// console.log(dataBaseLength());\n\ndeleteBookById(23);\ndeleteBookById(24);\n"]}